name: CI

on:
  pull_request:
  push:
    branches: [main]

jobs:
  scan_ruby:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for common Rails security vulnerabilities using static analysis
        run: bin/brakeman --no-pager

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Lint code for consistent style
        run: bin/rubocop -f github

  test:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Install packages
        run: |
          sudo apt-get update
          sudo apt-get install --no-install-recommends -y \
            google-chrome-stable \
            curl \
            libjemalloc2 \
            netcat-openbsd

      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Wait for Mongo to be ready
        run: |
          # wait for port to be open (gives the container time to initialize)
          for i in $(seq 1 60); do
            if nc -z localhost 27017; then
              echo "Mongo is listening on 27017"
              break
            fi
            echo "Waiting for Mongo... ($i/60)"
            sleep 1
          done
          # if mongosh is present in runner, try a health check; otherwise proceed
          if command -v mongosh >/dev/null 2>&1; then
            for i in $(seq 1 30); do
              if mongosh --host localhost --eval 'db.adminCommand("ping")' >/dev/null 2>&1; then
                echo "Mongo responded to ping"
                exit 0
              fi
              sleep 1
            done
            echo "mongosh failed to ping Mongo after waiting; continuing anyway"
          fi

      - name: Run tests
        env:
          RAILS_ENV: test
        run: bin/rails db:test:prepare test
